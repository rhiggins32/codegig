'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regex = require('./regex');

var _compareNumbers = require('./compareNumbers');

var _compareNumbers2 = _interopRequireDefault(_compareNumbers);

var _compareUnicode = require('./compareUnicode');

var _compareUnicode2 = _interopRequireDefault(_compareUnicode);

var _stringCompare = require('./stringCompare');

var _stringCompare2 = _interopRequireDefault(_stringCompare);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var compareChunks = function compareChunks(chunksA, chunksB) {
  var lengthA = chunksA.length;
  var lengthB = chunksB.length;
  var size = Math.min(lengthA, lengthB);
  for (var i = 0; i < size; i++) {
    var chunkA = chunksA[i];
    var chunkB = chunksB[i];
    if (chunkA !== chunkB) {
      if (chunkA === '' !== (chunkB === '')) {
        // empty strings have lowest value
        return chunkA === '' ? -1 : 1;
      }
      if (typeof chunkA === 'number' && typeof chunkB === 'number') {
        // compare numbers
        return (0, _compareNumbers2.default)(chunkA, chunkB);
      } else if (typeof chunkA === 'number' || typeof chunkB === 'number') {
        // number < string
        return typeof chunkA === 'number' ? -1 : 1;
      } else if (_regex.RE_UNICODE_CHARACTERS.test(chunkA + chunkB) && chunkA.localeCompare) {
        // use locale comparison only if one of the chunks contains unicode characters
        return (0, _compareUnicode2.default)(chunkA, chunkB);
      } else {
        // use common string comparison for performance reason
        return (0, _stringCompare2.default)(chunkA, chunkB);
      }
    }
  }
  // if the chunks are equal so far, the one which has more chunks is greater than the other one
  if (lengthA > size || lengthB > size) {
    return lengthA <= size ? -1 : 1;
  }
  return 0;
};
exports.default = compareChunks;